// Code generated by MockGen. DO NOT EDIT.
// Source: transaction_context.go

// Package postgres is a generated GoMock package.
package postgres

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	gorm "github.com/jinzhu/gorm"
)

// MockITransactionContext is a mock of ITransactionContext interface.
type MockITransactionContext struct {
	ctrl     *gomock.Controller
	recorder *MockITransactionContextMockRecorder
}

// MockITransactionContextMockRecorder is the mock recorder for MockITransactionContext.
type MockITransactionContextMockRecorder struct {
	mock *MockITransactionContext
}

// NewMockITransactionContext creates a new mock instance.
func NewMockITransactionContext(ctrl *gomock.Controller) *MockITransactionContext {
	mock := &MockITransactionContext{ctrl: ctrl}
	mock.recorder = &MockITransactionContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITransactionContext) EXPECT() *MockITransactionContextMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockITransactionContext) Begin() (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockITransactionContextMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockITransactionContext)(nil).Begin))
}

// Commit mocks base method.
func (m *MockITransactionContext) Commit(arg0 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockITransactionContextMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockITransactionContext)(nil).Commit), arg0)
}

// InTransaction mocks base method.
func (m *MockITransactionContext) InTransaction() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "inTransaction")
	ret0, _ := ret[0].(bool)
	return ret0
}

// InTransaction indicates an expected call of InTransaction.
func (mr *MockITransactionContextMockRecorder) InTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "inTransaction", reflect.TypeOf((*MockITransactionContext)(nil).InTransaction))
}

// Provider mocks base method.
func (m *MockITransactionContext) Provider() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Provider")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Provider indicates an expected call of Provider.
func (mr *MockITransactionContextMockRecorder) Provider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provider", reflect.TypeOf((*MockITransactionContext)(nil).Provider))
}

// Rollback mocks base method.
func (m *MockITransactionContext) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockITransactionContextMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockITransactionContext)(nil).Rollback))
}
